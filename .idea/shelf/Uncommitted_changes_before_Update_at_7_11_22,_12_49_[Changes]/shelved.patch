Index: src/PLAYER/MTS/Node.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package PLAYER.MTS;\n\nimport GAME.Cell;\nimport GAME.State;\nimport PLAYER.HumanPlayer;\nimport PLAYER.Player;\nimport PLAYER.RandomBot;\n\nimport java.util.ArrayList;\nimport java.util.Objects;\n\npublic class Node {\n    //TODO create the clone of the state all the time.\n\n    private Node parent;\n    private Node root;\n    private State state;\n    private ArrayList<Node> children;\n    private Cell white ;\n    private Cell black ;\n    private int depth;\n    private int numberOfSimulations;\n    private int numberOfWins;\n    private int numberOfChildren;\n    private ArrayList<Cell> emptyCells;\n\n    public Node(Node parent,State state,Cell white , Cell black){\n        this.parent = parent;\n        this.state = state;\n        this.white = white;\n        this.black = black;\n        try {\n            this.state = (State) (state.clone());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        if(white != null) {\n            state.getBoard().getCells().get(white.getId()).setColor(0);\n            state.getBoard().getCells().get(black.getId()).setColor(1);\n            state.updatePlayerScores();\n        }\n        this.emptyCells = state.getBoard().getEmptyCells();\n        numberOfWins = 0;\n        numberOfChildren = 0;\n        numberOfSimulations = 0;\n        children = new ArrayList<>();\n    }\n\n    public boolean isRoot(){\n        return parent == null;\n    }\n    public Node addChild(Node child){\n        for (Node node: children) {\n            if(child.equals(node)){\n                return node;\n            }\n        }\n        children.add(child);\n        numberOfChildren++;\n        return child;\n    }\n\n    public Node getRandomChild(){\n        //TODO correct this method\n        if(children.size()==0)\n            return null;\n        return children.get((int)(Math.random()*children.size()));\n\n    }\n\n    public boolean terminalNode(){\n        return state.isGameOver();\n    }\n\n    public int numberOfPossibleMoves(){\n        int n = state.getBoard().getNumberOfEmptyCells();\n        int k = 2;\n        return factorial(n)/(factorial(n-k));\n    }\n\n    public boolean Do_I_Have_More_Moves(){\n        int n = state.getBoard().getNumberOfEmptyCells();\n        int k = n - 2;\n        int posibleMoves = factorial(n)/(2 * factorial(k));\n        if(posibleMoves <= numberOfChildren){\n            return false;\n        }\n        return true;\n    }\n\n    public int factorial (int number) {\n        if (number <= 1){\n            return 1;\n        } else{\n            return number * factorial(number - 1);\n        }\n\n    }\n\n\n    public boolean duplicatedRandomMove(State state){\n\n        for (Node child : children) {\n            if (child.getState().equals(state)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //TODO fix all children\n    public void allChildren(){\n\n        int desiredSize = 100;\n        //TODO fix Number of possible moves !!\n        int numberOfPossibleMoves = numberOfPossibleMoves();\n        System.out.println(numberOfPossibleMoves);\n        outer:\n        for (int i = 0; i < emptyCells.size(); i++) {\n\n            for (int j = i + 1; j < emptyCells.size(); j++) {\n\n                Cell c1 = emptyCells.get(i);\n                Cell c2 = emptyCells.get(j);\n                c1.setColor(0);\n                c2.setColor(1);\n                if(!this.doesContain(c1,c2))\n                    children.add(new Node(this, state, c1, c2));\n                if(!this.doesContain(c2,c1))\n                    children.add(new Node(this, state, c2, c1));\n\n//                if(children.size() >= 2){\n//                    break outer;\n//                }\n//                break outer;\n            }\n\n        }\n    }\n\n\n    public double winningProbability(){\n        if(numberOfSimulations > 0 )\n            return numberOfWins/(double)numberOfSimulations;\n        return 0 ;\n    }\n\n    public Node getParent() {\n        return parent;\n    }\n\n    public ArrayList<Node> getChildren() {\n        return children;\n    }\n\n    public void setChildren(ArrayList<Node> children) {\n        this.children = children;\n    }\n\n    public void setParent(Node parent) {\n        this.parent = parent;\n    }\n\n    public State getState() {return state;}\n    public void setState(State state) {this.state = state;}\n    public Node getRoot() {return root;}\n    public void setRoot(Node root) {this.root = root;}\n    public int getNumberOfSimulations() {return numberOfSimulations;}\n    public void setNumberOfSimulations(int numberOfSimulations) {this.numberOfSimulations = numberOfSimulations;}\n    public int getNumberOfWins() {return numberOfWins;}\n    public void setNumberOfWins(int numberOfWins) {this.numberOfWins = numberOfWins;}\n    public Cell getBlack() {return black;}\n    public void setBlack(Cell black) {this.black = black;}\n    public ArrayList<Cell> getEmptyCells() {return emptyCells;}\n    public void setEmptyCells(ArrayList<Cell> emptyCells) {this.emptyCells = emptyCells;}\n    public Cell getWhite() {return white;}\n    public void setWhite(Cell white) {this.white = white;}\n    public int getDepth() {return depth;}\n    public void setDepth(int depth) {this.depth = depth;}\n    public int getNumberOfChildren() {return numberOfChildren;}\n    public void setNumberOfChildren(int numberOfChildren) {this.numberOfChildren = numberOfChildren;}\n\n    public boolean doesContain(Cell white ,Cell black) {\n        for (Node node :\n                children) {\n            if (node.getWhite().getId() == white.getId() && node.getBlack().getId() == black.getId()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(parent, state, white, black, depth);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Player> players = new ArrayList<>(){};\n        players.add(new HumanPlayer(\"White\") );\n        players.add(new RandomBot(\"Black\") );\n        State state = new State(3 , players);\n\n        Cell white = state.getBoard().getCells().get(0);\n        Cell black = state.getBoard().getCells().get(1);\n        Cell black2 = state.getBoard().getCells().get(2);\n        Node node1 = new Node(null,state,white,black );\n        Node node2 = new Node(null,state,white,black );\n        System.out.println(node1.equals(node2));\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/PLAYER/MTS/Node.java b/src/PLAYER/MTS/Node.java
--- a/src/PLAYER/MTS/Node.java	(revision ea2798da42eb9c37586560f429c5e79218e4aaf5)
+++ b/src/PLAYER/MTS/Node.java	(date 1667768679557)
@@ -110,6 +110,8 @@
     //TODO fix all children
     public void allChildren(){
 
+        //TODO FIX THIS and limit the expansion braching factor
+
         int desiredSize = 100;
         //TODO fix Number of possible moves !!
         int numberOfPossibleMoves = numberOfPossibleMoves();
